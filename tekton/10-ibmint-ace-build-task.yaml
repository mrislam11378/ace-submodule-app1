apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: ibmint-ace-build
spec:
  # The security and environment settings are needed for OpenShift in a non-default
  # namespace such as cp4i. Kaniko is expecting to be root in the container.
  stepTemplate:
    securityContext:
      runAsUser: 0
    env:
      - name: "HOME"
        value: "/tekton/home"
  params:
    - name: dockerRegistry
      type: string
  steps:
    - name: clone
      image: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.18.1
      script: |
        #!/bin/sh
        cd /work
        git clone --recurse-submodules "https://github.com/mrislam11378/ace-submodule-app1.git"
        # Slightly hacky but works
        chmod -R 777 /work/ace-submodule-app1
      volumeMounts:
        - mountPath: /work
          name: work
    - name: ibmint-build
      image: $(params.dockerRegistry)/ace-minimal-devcontainer:12.0.8.0
      script: |
        #!/bin/bash
        export LICENSE=accept
        . /opt/ibm/ace-12/server/bin/mqsiprofile
        export PATH=/opt/ibm/ace-12/common/jdk/bin:$PATH
        cd /work/ace-submodule-app1
        id
        ./build.sh
        ls -l /work/ace-submodule-app1-work-dir
      volumeMounts:
        - mountPath: /work
          name: work
    - name: unit-test
      image: $(params.dockerRegistry)/ace-minimal-devcontainer:12.0.8.0
      script: |
        #!/bin/bash
        export LICENSE=accept
        . /opt/ibm/ace-12/server/bin/mqsiprofile
        export PATH=/opt/ibm/ace-12/common/jdk/bin:$PATH
        cd /work/ace-submodule-app1
        id
        ./build-and-ut.sh
      volumeMounts:
        - mountPath: /work
          name: work
    - name: end-to-end-test
      image: $(params.dockerRegistry)/ace-minimal-devcontainer:12.0.8.0
      script: |
        #!/bin/bash
        export LICENSE=accept
        . /opt/ibm/ace-12/server/bin/mqsiprofile
        export PATH=/opt/ibm/ace-12/common/jdk/bin:$PATH
        cd /work/ace-submodule-app1
        id
        ./build-and-run-end-to-end-tests.sh
      volumeMounts:
        - mountPath: /work
          name: work
    - name: next-stage-container-setup
      image: $(params.dockerRegistry)/ace-minimal-devcontainer:12.0.8.0
      script: |
        #!/bin/bash
        cd /work/ace-submodule-app1-work-dir
        cp /work/ace-submodule-app1/tekton/Dockerfile Dockerfile
        # Fix permissions issues 
        chmod 777 /work/ace-submodule-app1-work-dir /work/ace-submodule-app1-work-dir/Dockerfile
        chmod -R a+r /work/ace-submodule-app1-work-dir
        find /work/ace-submodule-app1-work-dir -type d -print | xargs chmod 775
        ls -l /work/ace-submodule-app1-work-dir
      volumeMounts:
        - mountPath: /work
          name: work
    - name: docker-build-and-push
    # kaniko is expecting to run as root to build images
      securityContext:
        runAsUser: 0
        capabilities:
          add: ["CHOWN", "DAC_OVERRIDE","FOWNER","SETFCAP","SETGID","SETUID"]
      image: gcr.io/kaniko-project/executor:v0.16.0
      # specifying DOCKER_CONFIG is required to allow kaniko to detect docker credential
      env:
        - name: "DOCKER_CONFIG"
          value: "/tekton/home/.docker/"
      command:
        - /kaniko/executor
      args:
        - --dockerfile=/work/ace-submodule-app1-work-dir/Dockerfile
        - --destination=$(params.dockerRegistry)/tea-tekton-cp4i
        - --context=/work/ace-submodule-app1-work-dir
        - --build-arg=BASE_IMAGE=$(params.dockerRegistry)/ace-server-prod:12.0.8.0-r2
        - --skip-tls-verify
      volumeMounts:
        - mountPath: /work
          name: work
  volumes:
    - name: work
      emptyDir: {}
